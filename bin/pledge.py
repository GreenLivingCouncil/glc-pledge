import sqlite3
import datetime

DEBUG = True
conn = sqlite3.connect("pledges.db")

def get_referral_counts(referrer):
    """Given the SUNet ID of the referrer, return the number of referrals accumulated."""
    t = (referrer,)
    entry = conn.execute("select count from referralCounts where referrer=?", t).fetchone()
    if entry:
        return int(entry[0])
    else:
        return 0

def get_pledge_counts(event_id):
    """
    Given the event ID, return a dict mapping team ID to the number of pledges counted 
    for each team.
    """
    t = (event_id,)
    cur = conn.execute("select teamId, count from teamCounts where eventId=?", t)
    return dict(cur.fetchall())

def make_pledge_dict(entry):
    """
    Given a single SQL tuple from the pledge table with columns
        (name, teamId, dateString, comments, private)
    return a dict with the display name, team ID, hours elapsed, and comments.
    """
    # Compute time elapsed.
    pledge_time_str = entry[2]
    pledge_time_dt = datetime.datetime.strptime(pledge_time_str, '%Y-%m-%d %H:%M:%S.%f')
    td = datetime.datetime.today() - pledge_time_dt
    hours_ago = (td.seconds / 3600) + (td.days * 24)

    # Hide name if anonymous flag is set.
    is_anonymous = bool(entry[4])
    display_name = "Anonymous" if is_anonymous else entry[0]

    return {
        "name": display_name,
        "teamId": entry[1],
        "hoursAgo": hours_ago,
        "comments": entry[3]
        }

def get_pledges(event_id, max_pledges):
    """
    Return at most max_pledges pledges from event with event_id.
    Each pledge is in the format generated by make_pledge_dict().
    """
    d = {
        "eventId": event_id,
        "limit": max_pledges
        }
    cur = conn.execute("select name, teamId, dateString, comments, private from pledges "
                       "where eventId=:eventId order by dateString desc limit :limit", d)
    entries = cur.fetchall()
    return [make_pledge_dict(entry) for entry in entries]

def is_first_pledge(sunet_id, event_id):
    """
    Returns True iff student with given SUNet ID is pledging for the first time in
    the event with the given event ID.
    """
    cur = conn.execute("select * from pledges where sunetId=:sunetId and eventId=:eventId", 
                       {"sunetId": sunet_id, "eventId": event_id}) 
    return not bool(cur.fetchall())

def increment_pledge_count(team_id, event_id):
    # Create/increment team count
    if not conn.execute("select * from teamCounts where teamId=:teamId and eventId=:eventId", pledge).fetchall():
        conn.execute("insert into teamCounts (teamId, eventId) values (:teamId, :eventId)", pledge)
    conn.execute("update teamCounts set count=count+1 where teamId=:teamId and eventId=:eventId", pledge)


if DEBUG:
    import cgitb
    cgitb.enable()
